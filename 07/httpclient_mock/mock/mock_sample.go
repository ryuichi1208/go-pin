// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIer is a mock of APIer interface.
type MockAPIer struct {
	ctrl     *gomock.Controller
	recorder *MockAPIerMockRecorder
}

// MockAPIerMockRecorder is the mock recorder for MockAPIer.
type MockAPIerMockRecorder struct {
	mock *MockAPIer
}

// NewMockAPIer creates a new mock instance.
func NewMockAPIer(ctrl *gomock.Controller) *MockAPIer {
	mock := &MockAPIer{ctrl: ctrl}
	mock.recorder = &MockAPIerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIer) EXPECT() *MockAPIerMockRecorder {
	return m.recorder
}

// DoHttpRequest mocks base method.
func (m *MockAPIer) DoHttpRequest(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHttpRequest", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// DoHttpRequest indicates an expected call of DoHttpRequest.
func (mr *MockAPIerMockRecorder) DoHttpRequest(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHttpRequest", reflect.TypeOf((*MockAPIer)(nil).DoHttpRequest), url)
}

// DoHttpRequest2 mocks base method.
func (m *MockAPIer) DoHttpRequest2(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHttpRequest2", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// DoHttpRequest2 indicates an expected call of DoHttpRequest2.
func (mr *MockAPIerMockRecorder) DoHttpRequest2(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHttpRequest2", reflect.TypeOf((*MockAPIer)(nil).DoHttpRequest2), url)
}

// DoHttpRequest3 mocks base method.
func (m *MockAPIer) DoHttpRequest3(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHttpRequest3", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// DoHttpRequest3 indicates an expected call of DoHttpRequest3.
func (mr *MockAPIerMockRecorder) DoHttpRequest3(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHttpRequest3", reflect.TypeOf((*MockAPIer)(nil).DoHttpRequest3), url)
}

// DoHttpRequest4 mocks base method.
func (m *MockAPIer) DoHttpRequest4(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHttpRequest4", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// DoHttpRequest4 indicates an expected call of DoHttpRequest4.
func (mr *MockAPIerMockRecorder) DoHttpRequest4(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHttpRequest4", reflect.TypeOf((*MockAPIer)(nil).DoHttpRequest4), url)
}

// DoHttpRequest5 mocks base method.
func (m *MockAPIer) DoHttpRequest5(url string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHttpRequest5", url)
	ret0, _ := ret[0].(string)
	return ret0
}

// DoHttpRequest5 indicates an expected call of DoHttpRequest5.
func (mr *MockAPIerMockRecorder) DoHttpRequest5(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHttpRequest5", reflect.TypeOf((*MockAPIer)(nil).DoHttpRequest5), url)
}
